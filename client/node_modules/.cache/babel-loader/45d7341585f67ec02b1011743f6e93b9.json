{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { DELETE_POST, GET_POSTS, GET_POST, CREATE_POST, POST_ERROR, UPDATE_LIKES, ADD_COMMENT, REMOVE_COMMENT } from \"./types\"; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: error.response\n    });\n  }\n}; // Add like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText\n      }\n    });\n  }\n}; // Create post\n\nexport const createPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: CREATE_POST,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Post Created!\", \"success\"));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: error.response\n    });\n  }\n}; // Add comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Comment Added!\", \"success\"));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText\n      }\n    });\n  }\n}; // Remove comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/macbookpro/Development/devconnect/client/src/redux/actions/post.js"],"names":["axios","setAlert","DELETE_POST","GET_POSTS","GET_POST","CREATE_POST","POST_ERROR","UPDATE_LIKES","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","error","response","addLike","id","put","likes","msg","statusText","removeLike","deletePost","delete","createPost","formData","config","headers","post","getPost","addComment","postId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n\tDELETE_POST,\n\tGET_POSTS,\n\tGET_POST,\n\tCREATE_POST,\n\tPOST_ERROR,\n\tUPDATE_LIKES,\n\tADD_COMMENT,\n\tREMOVE_COMMENT,\n} from \"./types\";\n\n// Get posts\nexport const getPosts = () => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.get(\"/api/posts\");\n\n\t\tdispatch({\n\t\t\ttype: GET_POSTS,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: error.response,\n\t\t});\n\t}\n};\n\n// Add like\nexport const addLike = (id) => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.put(`/api/posts/like/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_LIKES,\n\t\t\tpayload: { id, likes: res.data },\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: error.response.statusText },\n\t\t});\n\t}\n};\n\n// Remove like\nexport const removeLike = (id) => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.put(`/api/posts/unlike/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: UPDATE_LIKES,\n\t\t\tpayload: { id, likes: res.data },\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: error.response.statusText },\n\t\t});\n\t}\n};\n\n// Delete post\nexport const deletePost = (id) => async (dispatch) => {\n\ttry {\n\t\tawait axios.delete(`/api/posts/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: DELETE_POST,\n\t\t\tpayload: id,\n\t\t});\n\n\t\tdispatch(setAlert(\"Post Removed\", \"success\"));\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: error.response.statusText },\n\t\t});\n\t}\n};\n\n// Create post\nexport const createPost = (formData) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t};\n\ttry {\n\t\tconst res = await axios.post(\"/api/posts\", formData, config);\n\n\t\tdispatch({\n\t\t\ttype: CREATE_POST,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(setAlert(\"Post Created!\", \"success\"));\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: error.response.statusText },\n\t\t});\n\t}\n};\n\n// Get post\nexport const getPost = (id) => async (dispatch) => {\n\ttry {\n\t\tconst res = await axios.get(`/api/posts/${id}`);\n\n\t\tdispatch({\n\t\t\ttype: GET_POST,\n\t\t\tpayload: res.data,\n\t\t});\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: error.response,\n\t\t});\n\t}\n};\n\n// Add comment\nexport const addComment = (postId, formData) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\",\n\t\t},\n\t};\n\ttry {\n\t\tconst res = await axios.post(\n\t\t\t`/api/posts/comment/${postId}`,\n\t\t\tformData,\n\t\t\tconfig\n\t\t);\n\n\t\tdispatch({\n\t\t\ttype: ADD_COMMENT,\n\t\t\tpayload: res.data,\n\t\t});\n\n\t\tdispatch(setAlert(\"Comment Added!\", \"success\"));\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: error.response.statusText },\n\t\t});\n\t}\n};\n\n// Remove comment\nexport const deleteComment = (postId, commentId) => async (dispatch) => {\n\ttry {\n\t\tawait axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n\t\tdispatch({\n\t\t\ttype: REMOVE_COMMENT,\n\t\t\tpayload: commentId,\n\t\t});\n\n\t\tdispatch(setAlert(\"Comment Removed\", \"success\"));\n\t} catch (error) {\n\t\tdispatch({\n\t\t\ttype: POST_ERROR,\n\t\t\tpayload: { msg: error.response.statusText },\n\t\t});\n\t}\n};\n"]},"metadata":{},"sourceType":"module"}